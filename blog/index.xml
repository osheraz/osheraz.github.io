<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Well, I should have written that down | Osher Azulay</title><link>https://osheraz.github.io/blog/</link><atom:link href="https://osheraz.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><description>Well, I should have written that down</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 05 Feb 2019 00:00:00 +0000</lastBuildDate><image><url>https://osheraz.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url><title>Well, I should have written that down</title><link>https://osheraz.github.io/blog/</link></image><item><title>Mapping, Perception and More</title><link>https://osheraz.github.io/blog/slam/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog/slam/</guid><description>&lt;p align="center">
&lt;img src="./test.jpg"/>
&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>Well, I took a really nice course last semester, which was all about autonomous driving. I really liked it because it was a hands-on course, with some of the nicest projects. The course introduced some of the core functions of autonomous driving system, such as localization and mapping, spatial perception and route planning which later on focus on deep learning solutions.&lt;/p>
&lt;p>Throughout the course, I thought it would be great to write a brief description about the projects I have done, for later projects I might do.&lt;/p>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>Project No.1&lt;/summary>
&lt;p>&lt;p>TODO: add the github folder here&lt;/p>
&lt;h4 id="topics">Topics&lt;/h4>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Mapping and Localization&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Probabilistic Occupancy Grid&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Iterative Closet Points (ICP)&lt;/li>
&lt;/ul>
&lt;p>Modeling and understanding the environment is a crucial task for autonomous robotics, in particular for mobile robots. Occupancy Grid Mapping refers to a family of computer algorithms in probabilistic robotics for mobile robots. This address the problem of generating maps from noisy and uncertain sensor measurement data, with the assumption that the robot pose is known. The basic idea of the occupancy grid is to represent a map of the environment as an evenly spaced field of binary random variables each representing the presence of an obstacle at that location in the environment. In this project, we experienced with real captured driving data - &lt;code>KITTI Dataset&lt;/code>. The data-set contains 6 hours of traffic scenarios at 10–100 Hz using a variety of sensor modalities such as high-resolution color and grayscale stereo cameras, a Velodyne 3D laser scanner, and a high-precision GPS/IMU inertial navigation system.&lt;/p>
&lt;p align="center">
&lt;img src="./pykitti.png"/>
&lt;/p>
&lt;p>The goal of an occupancy mapping algorithm is to estimate the posterior probability over maps given the data: $p(m\mid z_{1:t},x_{1:t})$, where $m$ is the map, $z_{1:t}$ is the set of measurements from time 1 to t, and $x_{1:t}$ is the set of robot poses from time 1 to t. If we let $m_{i}$ denote the grid cell with index $i$, then the notation $p(m_{i})$ represents the probability that cell i is occupied. The standard approach, then, is to break the problem down into smaller problems of estimating $p(m_{i}\mid z_{{1:t}},x_{{1:t}})$ for all grid cells $m_{i}$. Each of these estimation problems is then a binary problem. This breakdown is convenient but does lose some of the structure of the problem, since it does not enable modeling dependencies between neighboring cells. Instead, the posterior of a map is approximated by factoring it into $p(m\mid z_{{1:t}},x_{{1:t}})=\prod _{i}p(m_{i}\mid z_{{1:t}},x_{{1:t}})$.&lt;/p>
&lt;p align="center">
&lt;img src="./Video_100x100.gif" width="500" height="500" />
&lt;/p>
&lt;p>Hmm, I think it&amp;rsquo;s enough intro, let&amp;rsquo;s dig into the implementation. For that I used the &lt;code>pykitti&lt;/code> python package, which is a light package of minimal set of tools for working the the KITTI dataset. Basically, after passing the path of the recording, it provides each of the sensors data via generators for easy sequential access. This package assumes that you have already downloaded the calibration data associated with the sequences you want to work on, and that the directory structure is unchanged from the original structure laid out in the KITTI zip files.&lt;/p>
&lt;p>In the GitHub folder above, you can find the implementation of the &lt;code>OccupancyMap&lt;/code> class, which create and update the occupancy &amp;amp; threshold maps. I implemented the update function using the inverse sensor model described in Chapter 9 of “Probabilistic robotics”
by Sebastian Thrun etal [2]. In each of the update functions, I looped over the perceptual
field of the point cloud with respect to the current car position and updated the cell value of the occupancy map using the log odd form of the Bayes filter:
$l(m_{i}|z_{1:t},x_{1:t}) = l(m_{i}|z_{t},x_{t}) + l(m_{i}|z_{1:t−1},x_{1:t−1}) − l_{p}(m_{i})$&lt;/p>
&lt;p>The whole procedure of the occupancy map creation:&lt;/p>
&lt;ol>
&lt;li>At the beginning, I load the dataset and extract the rigid SE(3) pose transformation using &lt;code>dataset.oxts.T_w_imu&lt;/code> w.r.t the first measurement as the origin.&lt;/li>
&lt;li>Load the rigid transformation from the IMU to the velodyne, which is the constant transformation matrix I used to transform the current measured point cloud to the world coordinates at each iteration.&lt;/li>
&lt;li>For each of the car transformation matrix w.r.t to the origin:
&lt;ul>
&lt;li>Get the pose of the car&lt;/li>
&lt;li>Transform the PCL to world coordinate - loop over the current PCL and multiply each point with the current Lidar transformation matrix.&lt;/li>
&lt;li>Importance sampling - get only the cells with more than one measurement in the vertical direction.&lt;/li>
&lt;li>Update the occupancy and threshold maps.&lt;/li>
&lt;li>Visualize the scene map, the current point cloud the current occupancy map.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>Project No.2&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>Project No.4&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Project No.4&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details></description></item><item><title>Pose Estimation using Markers</title><link>https://osheraz.github.io/blog/track/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog/track/</guid><description>&lt;p align="center">
&lt;img src="./body-removebg-preview.png" />
&lt;/p>
&lt;p align = "right">
&lt;sub>&lt;sup>Image courtesy to TagSlam&lt;/sup>&lt;/sub>
&lt;/p>
&lt;br />
&lt;p>Throughout my research, I had to track the $SE(3)$ pose of an object for various of application. In this post ill summarize the &lt;code>ROS&lt;/code>-based implementation of some of the methods. Basically, most of the marker-based methods that ill cover only requires a USB-Cam, except the last one, which requires the whole &lt;code>OptiTrack&lt;/code> motion captures system. We uses &lt;code>OptiTrack&lt;/code> at the lab for for the finer applications.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
Most of the videos and figures are taken from the authors implementation and are not mine. I just gather them for future use.
&lt;/div>
&lt;/div>
&lt;p>In the following, ill use the notation $T^{1}_{0}$ to describe the homogeneous transformation matrix between coordinates frame 1 to 0. Detailed explanation about marker-based transformation can be seen &lt;a href="https://berndpfrommer.github.io/tagslam_web/concepts/" target="_blank" rel="noopener">Here&lt;/a>&lt;/p>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>AprilTag Markers&lt;/summary>
&lt;p>&lt;p>The &lt;a href="https://april.eecs.umich.edu/software/apriltag">AprilTag&lt;/a> come in several different families, depending on how many bits a tag can represent. Some tag families have large, coarse bit blocks (&lt;code>16h5&lt;/code>), while others are fine and smaller (&lt;code>36h11&lt;/code>- most common). For lower resolution camera, consider the &lt;code>16h5&lt;/code> family, For better ill suggest the &lt;code>36h11&lt;/code> and for circular object you should use the &lt;code>21h7&lt;/code> family.&lt;/p>
&lt;p>A full detailed explanation how to generate tags is described:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/AprilRobotics/apriltag-generation">AprilTag-Generation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://berndpfrommer.github.io/tagslam_web/making_tags/">Making and Using AprilTags&lt;/a>&lt;/li>
&lt;/ul>
&lt;p align="center">
&lt;img src="./april.png" />
&lt;/p>
&lt;p>The package works as shown in the above figure. The following default input topics are subscribed to (which can be remapped based on your needs):&lt;/p>
&lt;ul>
&lt;li>&lt;code>/camera/image_rect&lt;/code>: a &lt;code>sensor_msgs/Image&lt;/code> topic which contains the image (e.g. a frame of a video stream coming from a camera). The image is assumed to be undistorted, i.e. produced by a pinhole camera. I recommend to use the &lt;a href="http://wiki.ros.org/image_proc">image_proc_node&lt;/a>, which is meant to sit between the camera driver and vision processing nodes. &lt;code>image_proc&lt;/code> removes camera distortion from the raw image stream, and if necessary will convert Bayer or YUV422 format image data to color.&lt;/li>
&lt;li>&lt;code>/camera/camera_info&lt;/code>: a &lt;code>sensor_msgs/CameraInfo&lt;/code> topic which contains the camera calibration matrix in &lt;code>/camera/camera_info/K&lt;/code>. One can obtain a specific camera&amp;rsquo;s K via camera intrinsics calibration using any camera calibarion methods (&lt;a href="http://wiki.ros.org/camera_calibration">Option 1&lt;/a>, &lt;a href="https://navigation.ros.org/tutorials/docs/camera_calibration.html">Option 2&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=z4Oh_9Li72s&amp;amp;ab_channel=RoblabWHGe">Option 3&lt;/a> and so on..).&lt;/li>
&lt;/ul>
&lt;p>The Apriltag ROS package takes in a &lt;code>rectified&lt;/code> camera feed and returns a list of detected tags and their 3D locations. In order for this to work the software needs to know what tags it is looking for and how large they are. These are defined in 2 config files: &lt;code>config/settings.yaml&lt;/code> and &lt;code>config/tags.yaml&lt;/code>.&lt;/p>
&lt;p>The behavior of the ROS wrapper is fully defined by the two configuration files &lt;code>config/tags.yaml&lt;/code> (which defines the tags and tag bundles to look for) and &lt;code>config/settings.yaml&lt;/code> (which configures the core AprilTag 2 algorithm itself). Then, the following topics are output:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/tf&lt;/code>: relative pose between the camera frame and each detected tag&amp;rsquo;s or tag bundle&amp;rsquo;s frame (specified in &lt;code>tags.yaml&lt;/code>) using &lt;code>tf&lt;/code>.&lt;/li>
&lt;li>&lt;code>/tag_detections&lt;/code>: the same information as provided by the &lt;code>/tf&lt;/code> topic but as a custom message carrying the tag ID(s), size(s) and &lt;code>geometry_msgs/PoseWithCovarianceStamped&lt;/code> pose information.&lt;/li>
&lt;li>&lt;code>/tag_detections_image&lt;/code>: the same image as input by &lt;code>/camera/image_rect&lt;/code> but with the detected tags highlighted.&lt;/li>
&lt;/ul>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>ArTag Markers&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>ArUco Marker&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-4">
&lt;summary>OptiTrack&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details></description></item></channel></rss>