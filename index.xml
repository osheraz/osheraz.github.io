<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Osher Azulay</title><link>https://osheraz.github.io/</link><atom:link href="https://osheraz.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Osher Azulay</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate><image><url>https://osheraz.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url><title>Osher Azulay</title><link>https://osheraz.github.io/</link></image><item><title>Python basics</title><link>https://osheraz.github.io/blog-unused/example/python/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog-unused/example/python/</guid><description>&lt;p>Build a foundation in Python.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/rfscVS0vtbw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>What is the difference between lists and tuples?&lt;/summary>
&lt;p>&lt;p>Lists&lt;/p>
&lt;ul>
&lt;li>Lists are mutable - they can be changed&lt;/li>
&lt;li>Slower than tuples&lt;/li>
&lt;li>Syntax: &lt;code>a_list = [1, 2.0, 'Hello world']&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Tuples&lt;/p>
&lt;ul>
&lt;li>Tuples are immutable - they can&amp;rsquo;t be changed&lt;/li>
&lt;li>Tuples are faster than lists&lt;/li>
&lt;li>Syntax: &lt;code>a_tuple = (1, 2.0, 'Hello world')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Is Python case-sensitive?&lt;/summary>
&lt;p>Yes&lt;/p>
&lt;/details></description></item><item><title>Visualization</title><link>https://osheraz.github.io/blog-unused/example/visualization/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog-unused/example/visualization/</guid><description>&lt;p>Learn how to visualize data with Plotly.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/hSPmj7mK6ng" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>When is a heatmap useful?&lt;/summary>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Write Plotly code to render a bar chart&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-python">import plotly.express as px
data_canada = px.data.gapminder().query(&amp;quot;country == 'Canada'&amp;quot;)
fig = px.bar(data_canada, x='year', y='pop')
fig.show()
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details></description></item><item><title>Statistics</title><link>https://osheraz.github.io/blog-unused/example/stats/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog-unused/example/stats/</guid><description>&lt;p>Introduction to statistics for data science.&lt;/p>
&lt;p>
&lt;i class="fas fa-clock pr-1 fa-fw">&lt;/i> 1-2 hours per week, for 8 weeks&lt;/p>
&lt;h2 id="learn">Learn&lt;/h2>
&lt;p>The general form of the &lt;strong>normal&lt;/strong> probability density function is:&lt;/p>
&lt;p>$$
f(x) = \frac{1}{\sigma \sqrt{2\pi} } e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}
$$&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
The parameter $\mu$ is the mean or expectation of the distribution.
$\sigma$ is its standard deviation.
The variance of the distribution is $\sigma^{2}$.
&lt;/div>
&lt;/div>
&lt;h2 id="quiz">Quiz&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>What is the parameter $\mu$?&lt;/summary>
&lt;p>The parameter $\mu$ is the mean or expectation of the distribution.&lt;/p>
&lt;/details></description></item><item><title>Wheel Loader Scooping Controller Using Deep Reinforcement Learning</title><link>https://osheraz.github.io/publication/ddpg/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/publication/ddpg/</guid><description/></item><item><title>Display Jupyter Notebooks with Academic</title><link>https://osheraz.github.io/blog-unused/jupyter/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog-unused/jupyter/</guid><description>&lt;pre>&lt;code class="language-python">from IPython.core.display import Image
Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="./index_1_0.png" alt="png">&lt;/p>
&lt;pre>&lt;code class="language-python">print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>Welcome to Academic!
&lt;/code>&lt;/pre>
&lt;h2 id="install-python-and-jupyterlab">Install Python and JupyterLab&lt;/h2>
&lt;p>&lt;a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Install Anaconda&lt;/a> which includes Python 3 and JupyterLab.&lt;/p>
&lt;p>Alternatively, install JupyterLab with &lt;code>pip3 install jupyterlab&lt;/code>.&lt;/p>
&lt;h2 id="create-or-upload-a-jupyter-notebook">Create or upload a Jupyter notebook&lt;/h2>
&lt;p>Run the following commands in your Terminal, substituting &lt;code>&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code> and &lt;code>&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code> with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>jupyter&lt;/code> command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p>
&lt;h2 id="edit-your-post-metadata">Edit your post metadata&lt;/h2>
&lt;p>The first cell of your Jupter notebook will contain your post metadata (&lt;a href="https://sourcethemes.com/academic/docs/front-matter/" target="_blank" rel="noopener">front matter&lt;/a>).&lt;/p>
&lt;p>In Jupter, choose &lt;em>Markdown&lt;/em> as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p>
&lt;pre>&lt;code>---
title: My post's title
date: 2019-09-01
# Put any other Academic metadata here...
---
&lt;/code>&lt;/pre>
&lt;p>Edit the metadata of your post, using the &lt;a href="https://sourcethemes.com/academic/docs/managing-content" target="_blank" rel="noopener">documentation&lt;/a> as a guide to the available options.&lt;/p>
&lt;p>To set a &lt;a href="https://sourcethemes.com/academic/docs/managing-content/#featured-image" target="_blank" rel="noopener">featured image&lt;/a>, place an image named &lt;code>featured&lt;/code> into your post&amp;rsquo;s folder.&lt;/p>
&lt;p>For other tips, such as using math, see the guide on &lt;a href="https://sourcethemes.com/academic/docs/writing-markdown-latex/" target="_blank" rel="noopener">writing content with Academic&lt;/a>.&lt;/p>
&lt;h2 id="convert-notebook-to-markdown">Convert notebook to Markdown&lt;/h2>
&lt;pre>&lt;code class="language-bash">jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code>&lt;/pre>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>This post was created with Jupyter. The orginal files can be found at &lt;a href="https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter">https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a>&lt;/p></description></item><item><title>Mapping, Perception and More</title><link>https://osheraz.github.io/blog/slam/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog/slam/</guid><description>&lt;p align="center">
&lt;img src="./test.jpg"/>
&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>Well, I took a really nice course last semester, which was all about autonomous driving. I really liked it because it was a hands-on course, with some of the nicest projects. The course introduced some of the core functions of autonomous driving system, such as localization and mapping, spatial perception and route planning which later on focus on deep learning solutions.&lt;/p>
&lt;p>Throughout the course, I thought it would be great to write a brief description about the projects I have done, for later projects I might do.&lt;/p>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>Project No.1&lt;/summary>
&lt;p>&lt;p>TODO: add the github folder here&lt;/p>
&lt;h4 id="topics">Topics&lt;/h4>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Mapping and Localization&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Probabilistic Occupancy Grid&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Iterative Closet Points (ICP)&lt;/li>
&lt;/ul>
&lt;p>Modeling and understanding the environment is a crucial task for autonomous robotics, in particular for mobile robots. Occupancy Grid Mapping refers to a family of computer algorithms in probabilistic robotics for mobile robots. This address the problem of generating maps from noisy and uncertain sensor measurement data, with the assumption that the robot pose is known. The basic idea of the occupancy grid is to represent a map of the environment as an evenly spaced field of binary random variables each representing the presence of an obstacle at that location in the environment. In this project, we experienced with real captured driving data - &lt;code>KITTI Dataset&lt;/code>. The data-set contains 6 hours of traffic scenarios at 10–100 Hz using a variety of sensor modalities such as high-resolution color and grayscale stereo cameras, a Velodyne 3D laser scanner, and a high-precision GPS/IMU inertial navigation system.&lt;/p>
&lt;p align="center">
&lt;img src="./pykitti.png"/>
&lt;/p>
&lt;p>The goal of an occupancy mapping algorithm is to estimate the posterior probability over maps given the data: $p(m\mid z_{1:t},x_{1:t})$, where $m$ is the map, $z_{1:t}$ is the set of measurements from time 1 to t, and $x_{1:t}$ is the set of robot poses from time 1 to t. If we let $m_{i}$ denote the grid cell with index $i$, then the notation $p(m_{i})$ represents the probability that cell i is occupied. The standard approach, then, is to break the problem down into smaller problems of estimating $p(m_{i}\mid z_{{1:t}},x_{{1:t}})$ for all grid cells $m_{i}$. Each of these estimation problems is then a binary problem. This breakdown is convenient but does lose some of the structure of the problem, since it does not enable modeling dependencies between neighboring cells. Instead, the posterior of a map is approximated by factoring it into $p(m\mid z_{{1:t}},x_{{1:t}})=\prod _{i}p(m_{i}\mid z_{{1:t}},x_{{1:t}})$.&lt;/p>
&lt;p align="center">
&lt;img src="./Video_100x100.gif" width="500" height="500" />
&lt;/p>
&lt;p>Hmm, I think it&amp;rsquo;s enough intro, let&amp;rsquo;s dig into the implementation. For that I used the &lt;code>pykitti&lt;/code> python package, which is a light package of minimal set of tools for working the the KITTI dataset. Basically, after passing the path of the recording, it provides each of the sensors data via generators for easy sequential access. This package assumes that you have already downloaded the calibration data associated with the sequences you want to work on, and that the directory structure is unchanged from the original structure laid out in the KITTI zip files.&lt;/p>
&lt;p>In the GitHub folder above, you can find the implementation of the &lt;code>OccupancyMap&lt;/code> class, which create and update the occupancy &amp;amp; threshold maps. I implemented the update function using the inverse sensor model described in Chapter 9 of “Probabilistic robotics”
by Sebastian Thrun etal [2]. In each of the update functions, I looped over the perceptual
field of the point cloud with respect to the current car position and updated the cell value of the occupancy map using the log odd form of the Bayes filter:
$l(m_{i}|z_{1:t},x_{1:t}) = l(m_{i}|z_{t},x_{t}) + l(m_{i}|z_{1:t−1},x_{1:t−1}) − l_{p}(m_{i})$&lt;/p>
&lt;p>The whole procedure of the occupancy map creation:&lt;/p>
&lt;ol>
&lt;li>At the beginning, I load the dataset and extract the rigid SE(3) pose transformation using &lt;code>dataset.oxts.T_w_imu&lt;/code> w.r.t the first measurement as the origin.&lt;/li>
&lt;li>Load the rigid transformation from the IMU to the velodyne, which is the constant transformation matrix I used to transform the current measured point cloud to the world coordinates at each iteration.&lt;/li>
&lt;li>For each of the car transformation matrix w.r.t to the origin:
&lt;ul>
&lt;li>Get the pose of the car&lt;/li>
&lt;li>Transform the PCL to world coordinate - loop over the current PCL and multiply each point with the current Lidar transformation matrix.&lt;/li>
&lt;li>Importance sampling - get only the cells with more than one measurement in the vertical direction.&lt;/li>
&lt;li>Update the occupancy and threshold maps.&lt;/li>
&lt;li>Visualize the scene map, the current point cloud the current occupancy map.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>Project No.2&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>Project No.4&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Project No.4&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details></description></item><item><title>Pose Estimation using Markers</title><link>https://osheraz.github.io/blog/track/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/blog/track/</guid><description>&lt;p align="center">
&lt;img src="./body-removebg-preview.png" />
&lt;/p>
&lt;p align = "right">
&lt;sub>&lt;sup>Image courtesy to TagSlam&lt;/sup>&lt;/sub>
&lt;/p>
&lt;br />
&lt;p>Throughout my research, I had to track the $SE(3)$ pose of an object for various of application. In this post ill summarize the &lt;code>ROS&lt;/code>-based implementation of some of the methods. Basically, most of the marker-based methods that ill cover only requires a USB-Cam, except the last one, which requires the whole &lt;code>OptiTrack&lt;/code> motion captures system. We uses &lt;code>OptiTrack&lt;/code> at the lab for for the finer applications.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
Most of the videos, figures and explanation are taken from the authors implementation and are not mine. I just gather them for future use.
&lt;/div>
&lt;/div>
&lt;p>In the following, ill use the notation $T^{1}_{0}$ to describe the homogeneous transformation matrix between coordinates frame 1 to 0. Detailed explanation about marker-based transformation can be seen &lt;a href="https://berndpfrommer.github.io/tagslam_web/concepts/" target="_blank" rel="noopener">Here&lt;/a>&lt;/p>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>AprilTag Markers&lt;/summary>
&lt;p>&lt;p>The &lt;a href="https://april.eecs.umich.edu/software/apriltag">AprilTag&lt;/a> come in several different families, depending on how many bits a tag can represent. Some tag families have large, coarse bit blocks (&lt;code>16h5&lt;/code>), while others are fine and smaller (&lt;code>36h11&lt;/code>- most common). For lower resolution camera, consider the &lt;code>16h5&lt;/code> family, For better ill suggest the &lt;code>36h11&lt;/code> and for circular object you should use the &lt;code>21h7&lt;/code> family.&lt;/p>
&lt;p>A full detailed explanation how to generate tags is described:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/AprilRobotics/apriltag-generation">AprilTag-Generation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://berndpfrommer.github.io/tagslam_web/making_tags/">Making and Using AprilTags&lt;/a>&lt;/li>
&lt;/ul>
&lt;p align="center">
&lt;img src="./tag_size_april.jpg"/>
&lt;/p>
&lt;h4 id="measuring-the-tag-size">Measuring the tag Size&lt;/h4>
&lt;p>When entering (ill explain it later) the size of your tag for pose estimation it is important to know what &amp;ldquo;size&amp;rdquo; is actually a measure of. The measurement that is called &amp;ldquo;size&amp;rdquo; is shown as &amp;ldquo;edge length&amp;rdquo; in the image below.
The tag size should not be measured from the outside of the tag. The tag size is defined as the distance between the detection corners, or alternately, the length of the edge between the white border and the black border. The following illustration marks the detection corners with red &lt;code>X&lt;/code>s and the tag size with a red arrow for a tag from the 48h12Custom tag family.&lt;/p>
&lt;p align="center">
&lt;img src="./april_size.png" width=30% />
&lt;/p>
&lt;h4 id="coordinate-system">Coordinate system&lt;/h4>
&lt;p>The coordinate system has the origin at the camera center. The z-axis points from the camera center out the camera lens. The x-axis is to the right in the image taken by the camera, and y is up.&lt;/p>
&lt;p align="center">
&lt;img src="./test.png" width=30% />
&lt;/p>
&lt;h3 id="apriltag_roshttpwikirosorgapriltag_ros">&lt;a href="http://wiki.ros.org/apriltag_ros">apriltag_ros&lt;/a>&lt;/h3>
&lt;h4 id="installation">Installation&lt;/h4>
&lt;p>Starting with a working ROS installation (Kinetic and Melodic are supported):&lt;/p>
&lt;pre>&lt;code>export ROS_DISTRO=melodic # Set this to your distro, e.g. kinetic or melodic
source /opt/ros/$ROS_DISTRO/setup.bash # Source your ROS distro
mkdir -p ~/catkin_ws/src # Make a new workspace
cd ~/catkin_ws/src # Navigate to the source space
git clone https://github.com/AprilRobotics/apriltag.git # Clone Apriltag library
git clone https://github.com/AprilRobotics/apriltag_ros.git # Clone Apriltag ROS wrapper
cd ~/catkin_ws # Navigate to the workspace
rosdep install --from-paths src --ignore-src -r -y # Install any missing packages
catkin build # Build all packages in the workspace (catkin_make_isolated will work also)
&lt;/code>&lt;/pre>
&lt;p>The package works as shown in the above figure. The following default input topics are subscribed to (which can be remapped based on your needs):&lt;/p>
&lt;p align="center">
&lt;img src="./april.png" />
&lt;/p>
&lt;ul>
&lt;li>&lt;code>/camera/image_rect&lt;/code>: a &lt;code>sensor_msgs/Image&lt;/code> topic which contains the image (e.g. a frame of a video stream coming from a camera). The image is assumed to be undistorted, i.e. produced by a pinhole camera. I recommend to use the &lt;a href="http://wiki.ros.org/image_proc">image_proc_node&lt;/a>, which is meant to sit between the camera driver and vision processing nodes. &lt;code>image_proc&lt;/code> removes camera distortion from the raw image stream, and if necessary will convert Bayer or YUV422 format image data to color.&lt;/li>
&lt;li>&lt;code>/camera/camera_info&lt;/code>: a &lt;code>sensor_msgs/CameraInfo&lt;/code> topic which contains the camera calibration matrix in &lt;code>/camera/camera_info/K&lt;/code>. One can obtain a specific camera&amp;rsquo;s K via camera intrinsics calibration using any camera calibarion methods (&lt;a href="http://wiki.ros.org/camera_calibration">Option 1&lt;/a>, &lt;a href="https://navigation.ros.org/tutorials/docs/camera_calibration.html">Option 2&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=z4Oh_9Li72s&amp;amp;ab_channel=RoblabWHGe">Option 3&lt;/a> and so on..).&lt;/li>
&lt;/ul>
&lt;p>The Apriltag ROS package takes in a &lt;code>rectified&lt;/code> camera feed and returns a list of detected tags and their 3D locations. In order for this to work the software needs to know what tags it is looking for and how large they are. These are defined in 2 config files: &lt;code>config/settings.yaml&lt;/code> and &lt;code>config/tags.yaml&lt;/code>.&lt;/p>
&lt;p>The behavior of the ROS wrapper is fully defined by the two configuration files &lt;code>config/tags.yaml&lt;/code> (which defines the tags and tag bundles to look for) and &lt;code>config/settings.yaml&lt;/code> (which configures the core AprilTag 2 algorithm itself). Then, the following topics are output:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/tf&lt;/code>: relative pose between the camera frame and each detected tag&amp;rsquo;s or tag bundle&amp;rsquo;s frame (specified in &lt;code>tags.yaml&lt;/code>) using &lt;code>tf&lt;/code>.&lt;/li>
&lt;li>&lt;code>/tag_detections&lt;/code>: the same information as provided by the &lt;code>/tf&lt;/code> topic but as a custom message carrying the tag ID(s), size(s) and &lt;code>geometry_msgs/PoseWithCovarianceStamped&lt;/code> pose information.&lt;/li>
&lt;li>&lt;code>/tag_detections_image&lt;/code>: the same image as input by &lt;code>/camera/image_rect&lt;/code> but with the detected tags highlighted.&lt;/li>
&lt;/ul>
&lt;h4 id="settingsyaml-parameters">settings.yaml parameters&lt;/h4>
&lt;p>this file configures the detection algorithm parameters (most are self-explained)&lt;/p>
&lt;pre>&lt;code>tag_family: 'tag36h11' # Tag family
tag_border: 1 # Size (in bits) of the black border. Always 1 if made by optitag
tag_threads: 2 # Number of detection thread. Tune per your CPU
tag_decimate: 1.0 # Reduce the resolution of the image by this number. Increases speed at the sacrifice of detecting smaller tags
tag_blur: 0.0 # tag_blur&amp;gt;0 blurs the image and tag_blur&amp;lt;0 sharpens the image
tag_refine_edges: 1 # improves edge detection and therefore improves pose estimation. Light computation
tag_refine_decode: 0 # reduces false negative detection rate. Medium computation
tag_refine_pose: 0 # improves pose estimation accuracy. Heavy computation
tag_debug: 0 # save debug images to ~/.ros Careful if running with video
publish_tf: true # publish tag/bundle poses to /tf topic
&lt;/code>&lt;/pre>
&lt;h4 id="tagsyaml-parameters">tags.yaml parameters&lt;/h4>
&lt;p>This file tells the algorithm what tags to look for in the environment and how large they are so they can be placed in 3D space. The software assumes distance measurements are in &lt;code>meters&lt;/code> and orientation is in &lt;code>quaternions&lt;/code> (One can use &lt;code>tf.transformation&lt;/code> package for other transformations)&lt;/p>
&lt;pre>&lt;code>standalone_tags:
[
{id: 10, size: 0.15},
{id: 20, size: 0.1},
{id: 30, size: 0.07}
]
tag_bundles:
[
{
name: 'my_bundle',
layout:
[
{id: 0, size: 0.05, x: 0.0000, y: 0.0000, z: 0.0, qw: 1.0, qx: 0.0, qy: 0.0, qz: 0.0},
{id: 4, size: 0.05, x: 0.0548, y: -0.0522, z: 0.0, qw: 1.0, qx: 0.0, qy: 0.0, qz: 0.0},
{id: 3, size: 0.05, x: -0.0580, y: -0.0553, z: 0.0, qw: 1.0, qx: 0.0, qy: 0.0, qz: 0.0},
{id: 2, size: 0.05, x: 0.0543, y: 0.0603, z: 0.0, qw: 1.0, qx: 0.0, qy: 0.0, qz: 0.0},
{id: 1, size: 0.05, x: -0.0582, y: 0.0573, z: 0.0, qw: 1.0, qx: 0.0, qy: 0.0, qz: 0.0}
]
}
]
&lt;/code>&lt;/pre>
&lt;p>As we can see in the above configuration, We can define 2 tracking methods, &lt;code>standalone_tags&lt;/code> and &lt;code>tag_bundles&lt;/code>. For &lt;code>standalone&lt;/code> tags, i.e. each marker represents a unique object in the environment we provide an ID and size for each tag you want to detect. For &lt;code>tag_bundles&lt;/code> is the new feature which let you track an object which represented by multiple tags to overcome occlusion and such. Upon detection of a single or multiple tags in the bundle, the software will report the 6 DOF pose of the bundle&amp;rsquo;s origin. When we create a bundle you specify a list of tags. Each tag has a tag ID, size, and 6 DOF location of the tag in reference to the bundle&amp;rsquo;s origin.&lt;/p>
&lt;p>Important notes mentioned by the authors:&lt;/p>
&lt;ul>
&lt;li>No tag ID should appear twice with different sizes (this creates ambiguity in the detection)&lt;/li>
&lt;li>No tag ID should appear twice in the image (this creates ambiguity in the detection)&lt;/li>
&lt;li>It is fine for a tag with the same ID to be listed both in standalone_tags and in tag_bundles, as long as it has the same size.&lt;/li>
&lt;/ul>
&lt;p>A complete &lt;code>launch&lt;/code> file which:&lt;/p>
&lt;ul>
&lt;li>Open the camera stream from the &lt;code>video_device&lt;/code> with &lt;code>width&lt;/code> and &lt;code>height&lt;/code> parameters.&lt;/li>
&lt;li>Launch the &lt;code>image_proc&lt;/code> node to remove distortions.&lt;/li>
&lt;li>Load the &lt;code>settings.yaml&lt;/code> and &lt;code>tags.yaml&lt;/code> configurations files to the parameters server.&lt;/li>
&lt;li>Run the &lt;code>apriltag_ros&lt;/code> core node and publish the detected transformation.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>&amp;lt;launch&amp;gt;
&amp;lt;node name=&amp;quot;camera&amp;quot; pkg=&amp;quot;usb_cam&amp;quot; type=&amp;quot;usb_cam_node&amp;quot; output=&amp;quot;screen&amp;quot; &amp;gt;
&amp;lt;param name=&amp;quot;video_device&amp;quot; value=&amp;quot;/dev/video4&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;image_width&amp;quot; value=&amp;quot;1280&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;image_height&amp;quot; value=&amp;quot;720&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;pixel_format&amp;quot; value=&amp;quot;yuyv&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;camera_frame_id&amp;quot; value=&amp;quot;rgb_cam_link&amp;quot; /&amp;gt;
&amp;lt;/node&amp;gt;
&amp;lt;node pkg=&amp;quot;image_proc&amp;quot; type=&amp;quot;image_proc&amp;quot; name=&amp;quot;iamge_proc_node&amp;quot; ns=&amp;quot;camera&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;launch_prefix&amp;quot; default=&amp;quot;&amp;quot; /&amp;gt; &amp;lt;!-- set to value=&amp;quot;gdbserver localhost:10000&amp;quot; for remote debugging --&amp;gt;
&amp;lt;arg name=&amp;quot;node_namespace&amp;quot; default=&amp;quot;apriltag_ros_continuous_node&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;camera_name&amp;quot; default=&amp;quot;/camera&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;camera_frame&amp;quot; default=&amp;quot;camera&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;image_topic&amp;quot; default=&amp;quot;image_rect&amp;quot; /&amp;gt;
&amp;lt;!-- Set parameters --&amp;gt;
&amp;lt;rosparam command=&amp;quot;load&amp;quot; file=&amp;quot;$(find apriltag_ros)/config/settings.yaml&amp;quot; ns=&amp;quot;$(arg node_namespace)&amp;quot; /&amp;gt;
&amp;lt;rosparam command=&amp;quot;load&amp;quot; file=&amp;quot;$(find apriltag_ros)/config/tags.yaml&amp;quot; ns=&amp;quot;$(arg node_namespace)&amp;quot; /&amp;gt;
&amp;lt;node pkg=&amp;quot;apriltag_ros&amp;quot; type=&amp;quot;apriltag_ros_continuous_node&amp;quot; name=&amp;quot;$(arg node_namespace)&amp;quot; clear_params=&amp;quot;true&amp;quot; output=&amp;quot;screen&amp;quot; launch-prefix=&amp;quot;$(arg launch_prefix)&amp;quot; &amp;gt;
&amp;lt;!-- Remap topics from those used in code to those on the ROS network --&amp;gt;
&amp;lt;remap from=&amp;quot;image_rect&amp;quot; to=&amp;quot;$(arg camera_name)/$(arg image_topic)&amp;quot; /&amp;gt;
&amp;lt;remap from=&amp;quot;camera_info&amp;quot; to=&amp;quot;$(arg camera_name)/camera_info&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;camera_frame&amp;quot; type=&amp;quot;str&amp;quot; value=&amp;quot;$(arg camera_frame)&amp;quot; /&amp;gt;
&amp;lt;param name=&amp;quot;publish_tag_detections_image&amp;quot; type=&amp;quot;bool&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!-- default: false --&amp;gt;
&amp;lt;/node&amp;gt;
&amp;lt;/launch&amp;gt;
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>ArTag Markers&lt;/summary>
&lt;p>&lt;p>In this part ill explain the usage of &lt;code>ar_track_alvar&lt;/code> package for AR tag tracking. This package is a ROS wrapper for &lt;a href="http://virtual.vtt.fi/virtual/proj2/multimedia/index.html">Alvar&lt;/a>, an open source AR tag tracking library.&lt;/p>
&lt;p align="center">
&lt;img src="./OpenManipulator_AR_Marker.png" width="80%" />
&lt;/p>
&lt;p>&lt;code>ar_track_alvar&lt;/code> node has 4 main functionalities:&lt;/p>
&lt;ul>
&lt;li>Generating AR tags of varying size, resolution, and data/ID encoding&lt;/li>
&lt;li>Identifying and tracking the pose of individual AR tags, optionally integrating kinect depth data (when a kinect is available) for better pose estimates.
Identifying and tracking the pose of &lt;code>bundles&lt;/code> consisting of multiple tags. This allows for more stable pose estimates, robustness to occlusions, and tracking of multi-sided objects.&lt;/li>
&lt;/ul>
&lt;p>Alvar features adaptive thresholding to handle a variety of lighting conditions, optical flow based tracking for more stable pose estimation, and an improved tag identification method that does not significantly slow down as the number of tags increases.&lt;/p>
&lt;h4 id="installation">Installation&lt;/h4>
&lt;p>for melodic-devel:&lt;/p>
&lt;pre>&lt;code>sudo apt-get install ros-melodic-ar-track-alvar ros-melodic-ar-track-alvar-msgs ros-melodic-image-proc
&lt;/code>&lt;/pre>
&lt;p>or just clone and build the github repo &lt;a href="https://github.com/ros-perception/ar_track_alvar">Github&lt;/a>.&lt;/p>
&lt;p>In order to use AR Marker properly with your camera, be sure to add the camera model to the launch command when using AR Marker (camera_calibration process as described in aprtiltag section.&lt;/p>
&lt;h4 id="generating-ar-tags">Generating AR tags&lt;/h4>
&lt;p>Two pdf files are in the markers directory containing tags 0-8 and 9-17, respectively. Alternativly, we can get the tags from &lt;a href="http://wiki.ros.org/ar_track_alvar">ar_track_alvar&lt;/a> and resize to our use. If you want to generate your own markers with different ID numbers, border widths, or sizes, run:&lt;/p>
&lt;pre>&lt;code>rosrun ar_track_alvar createMarker 0 -s 10.0
&lt;/code>&lt;/pre>
&lt;p>This will create &lt;code>MarkerData_0.png&lt;/code> file that stores a 10cm x 10cm marker with id 0. Print this file on a sheet of paper.&lt;/p>
&lt;p>Due to differences in printer setups, the actual size of the printed marker may be different. Make sure the &lt;code>marker_size&lt;/code> parameter represents the actual size (in centimeters) of the AR tag.&lt;/p>
&lt;h4 id="tracking">Tracking&lt;/h4>
&lt;p>In order to identify and track the poses of (possibly) multiple AR tags that are each considered individually. The packges uses the node &lt;code>individualMarkers&lt;/code> which takes the following parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>marker_size&lt;/code> (double) &amp;ndash; The width in centimeters of one side of the black square marker border&lt;/li>
&lt;li>&lt;code>max_new_marker_error&lt;/code> (double) &amp;ndash; A threshold determining when new markers can be detected under uncertainty&lt;/li>
&lt;li>&lt;code>max_track_error&lt;/code> (double) &amp;ndash; A threshold determining how much tracking error can be observed before an tag is considered to have disappeared&lt;/li>
&lt;li>&lt;code>camera_image&lt;/code> (string) &amp;ndash; The name of the topic that provides camera frames for detecting the AR tags. This can be mono or color, but should be an UNrectified image, since rectification takes place in this package&lt;/li>
&lt;li>&lt;code>camera_info&lt;/code> (string) &amp;ndash; The name of the topic that provides the camera calibration parameters so that the image can be rectified&lt;/li>
&lt;li>&lt;code>output_frame&lt;/code> (string) &amp;ndash; The name of the frame that the published Cartesian locations of the AR tags will be relative to&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IMPORTANT:&lt;/strong> The node assumes that a Kinect camera being used as the camera, so that depth data can be integrated for better pose estimates. If you are not using a Kinect or do not desire to use depth data improvements, use &lt;code>individualMarkersNoKinect&lt;/code> instead.&lt;/p>
&lt;p>To use the package we need to create a new &lt;code>launch&lt;/code> file. Inside &lt;code>launch/&lt;/code> directory add &lt;code>alvar_track.launch&lt;/code> with the following content:&lt;/p>
&lt;pre>&lt;code>&amp;lt;launch&amp;gt;
&amp;lt;arg name=&amp;quot;marker_frame_id&amp;quot; default=&amp;quot;world&amp;quot;/&amp;gt;
&amp;lt;arg name=&amp;quot;user_marker_size&amp;quot; default=&amp;quot;7.0&amp;quot;/&amp;gt;
&amp;lt;arg name=&amp;quot;camera_model&amp;quot; default=&amp;quot;astra_pro&amp;quot; doc=&amp;quot;model type [astra_pro, realsense_d435, raspicam]&amp;quot;/&amp;gt;
&amp;lt;arg name=&amp;quot;camera_namespace&amp;quot; default=&amp;quot;camera&amp;quot;/&amp;gt;
&amp;lt;arg name=&amp;quot;rgb_camera_info_url&amp;quot; default=&amp;quot;package://open_manipulator_p_camera/camera_info/$(arg camera_model).yaml&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;depth_camera_info_url&amp;quot; default=&amp;quot;&amp;quot; /&amp;gt;
&amp;lt;include file=&amp;quot;$(find ar_track_alvar)/launch/pr2_indiv_no_kinect.launch&amp;quot;&amp;gt;
&amp;lt;arg name=&amp;quot;marker_size&amp;quot; value=&amp;quot;$(arg user_marker_size)&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;max_new_marker_error&amp;quot; value=&amp;quot;0.08&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;max_track_error&amp;quot; value=&amp;quot;0.2&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;cam_image_topic&amp;quot; value=&amp;quot;$(arg camera_namespace)/image_raw&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;cam_info_topic&amp;quot; value=&amp;quot;$(arg camera_namespace)/camera_info&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;output_frame&amp;quot; value=&amp;quot;$(arg marker_frame_id)&amp;quot; /&amp;gt;
&amp;lt;/include&amp;gt;
&amp;lt;/launch&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="bundle">Bundle&lt;/h4>
&lt;p>Sometimes it is advantageous to treat &amp;ldquo;bundles&amp;rdquo; of multiple tags as a single unit. For example, this can allow for the estimation of the pose of a many-sided object, even when some of the tags cannot be seen. A tag bundle is defined by an XML file that lists a set of tag IDs and their positions relative to a &lt;code>master&lt;/code> tag. The master tag always comes first in the XML file and defines a coordinate system for the rest of the tags.&lt;/p>
&lt;p>&lt;strong>IMPORTANT&lt;/strong>: this coordinate system is different from the standard system used in ROS! In this system, when facing the tag, positive-z comes out of the front of the tag toward the viewer, positive-x is to the right, and positive-y is up.&lt;/p>
&lt;p>To create a bundle, first choose which tag you want to be the master tag. Treat the center of the master tag as (0,0,0). Then, after placing the rest of the tags, measure the x, y, and z coordinate for each of the 4 corners of all of the tags, relative to the master tag origin. Enter these measurements for each tag into the XML file starting with the lower left corner and progressing counter-clockwise around the tag. After creating the XML file all you need is to add the following parameter to your launch file.&lt;/p>
&lt;ul>
&lt;li>&lt;code>bundle_files&lt;/code> (multiple strings) &amp;ndash; A list of XML file names, one for each bundle you wish to detect.&lt;/li>
&lt;/ul>
&lt;p>An example XML file showing this for a tagged table leg:&lt;/p>
&lt;pre>&lt;code>&amp;lt;launch&amp;gt;
&amp;lt;arg name=&amp;quot;marker_size&amp;quot; default=&amp;quot;4.4&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;max_new_marker_error&amp;quot; default=&amp;quot;0.08&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;max_track_error&amp;quot; default=&amp;quot;0.2&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;cam_image_topic&amp;quot; default=&amp;quot;/wide_stereo/left/image_color&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;cam_info_topic&amp;quot; default=&amp;quot;/wide_stereo/left/camera_info&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;output_frame&amp;quot; default=&amp;quot;/torso_lift_link&amp;quot; /&amp;gt;
&amp;lt;arg name=&amp;quot;bundle_files&amp;quot; default=&amp;quot;$(find ar_track_alvar)/bundles/truthTableLeg.xml $(find ar_track_alvar)/bundles/table_8_9_10.xml&amp;quot; /&amp;gt;
&amp;lt;node name=&amp;quot;ar_track_alvar&amp;quot; pkg=&amp;quot;ar_track_alvar&amp;quot; type=&amp;quot;findMarkerBundlesNoKinect&amp;quot; respawn=&amp;quot;false&amp;quot; output=&amp;quot;screen&amp;quot; args=&amp;quot;$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame) $(arg bundle_files)&amp;quot; /&amp;gt;
&amp;lt;/launch&amp;gt;
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>ArUco Marker&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-4">
&lt;summary>OptiTrack&lt;/summary>
&lt;p>Todo.&lt;/p>
&lt;/details></description></item><item><title/><link>https://osheraz.github.io/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osheraz.github.io/admin/config.yml</guid><description/></item></channel></rss>